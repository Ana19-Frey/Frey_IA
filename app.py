import streamlit as st
import os
import pandas as pd
import io
from google import genai
from google.genai import types
from typing import Any # Ajout pour l'annotation de type de la m√©moire

# Importation des modules
from modules.chatbot import process_chatbot_query
from modules.data_analyst import analyze_data_pandas, format_analysis_with_gemini
from modules.content import generate_content


# --- üß† PROMPT SYST√âMIQUE FREY ---
FREY_SYSTEM_PROMPT = """
Tu es FREY, une Intelligence Artificielle multifonctionnelle.
Ton style est professionnel, bienveillant, p√©dagogique et inspirant.
Ton objectif est de simplifier la vie de l‚Äôutilisateur, de r√©pondre rapidement et de produire du contenu de qualit√©.
Tu es clair, fluide, amical, mais pr√©cis.

R√àGLES DE R√âPONSE OBLIGATOIRES :
1. Structure : Fournis toujours une r√©ponse claire et d√©taill√©e en utilisant des titres, sous-titres, et emojis pertinents.
2. Synth√®se : Termine TOUJOURS ta r√©ponse par deux sections en gras :
    - **R√©sum√© :** [Synth√®se de ta r√©ponse en une seule phrase.]
    - **Suggestion :** [Une action concr√®te ou une piste de r√©flexion bas√©e sur la r√©ponse/l'analyse.]
3. Ambigu√Øt√© : Si la question est floue, reformule-la avant de r√©pondre.
4. Contenu : Ne r√©ponds JAMAIS "je ne sais pas". Propose toujours une explication logique ou une piste.
"""

# --- üîë S√âCURIT√â ET INITIALISATION GEMINI ---
try: 
    if 'GEMINI_API_KEY' not in st.secrets:
        st.error("üö® ERREUR : La cl√© 'GEMINI_API_KEY' n'est pas trouv√©e dans .streamlit/secrets.toml.")
        st.stop()
    
    GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
    
    # 2. Initialisation du Client Gemini
    gemini_client = genai.Client(api_key=GEMINI_API_KEY)
    
except Exception as e:
    st.error(f"Erreur d'initialisation de l'API Gemini : {e}")
    st.stop()

# --------------------------------------------------------

# --- FONCTION DE R√âINITIALISATION DE LA M√âMOIRE ---
def clear_chat_history():
    """R√©initialise la session de chat dans l'√©tat de session de Streamlit."""
    try:
        st.session_state.chat_session = gemini_client.chats.create(
            model="gemini-2.5-flash",
            config=types.GenerateContentConfig(
                system_instruction=FREY_SYSTEM_PROMPT
            )
        )
    except Exception as e:
        st.error(f"Erreur lors de la r√©initialisation de la session de chat : {e}")

# --------------------------------------------------------

# --- üß† GESTION DE LA M√âMOIRE DU CHATBOT (SESSION) ---
if 'chat_session' not in st.session_state:
    try:
        st.session_state.chat_session = gemini_client.chats.create(
            model="gemini-2.5-flash",
            config=types.GenerateContentConfig(
                system_instruction=FREY_SYSTEM_PROMPT
            )
        )
    except Exception as e:
        st.error(f"Erreur lors de la cr√©ation de la session de chat : {e}")
        st.stop()
        
# --------------------------------------------------------


# --- üé® CONFIGURATION ET STYLE FREY ---

# 1. Configuration de la page
st.set_page_config(
    page_title="FREY - IA Multifonction",
    layout="wide",
    initial_sidebar_state="collapsed",
)

# 2. Injection du style CSS (Am√©lior√©)
st.markdown(
    """
    <style>
    /* Palette: bleu roi #2563eb, blanc cass√© #f5f7fa, gris fonc√© #1e293b */
    body { background-color: #f5f7fa; color: #1e293b; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
    .stApp { background-color: #f5f7fa; }
    .stTabs [data-baseweb="tab-list"] button [data-testid="stMarkdownContainer"] p { font-size: 1.2rem; font-weight: 600; }
    .stTabs [data-baseweb="tab-list"] button[aria-selected="true"] { border-bottom: 2px solid #2563eb; color: #2563eb; }
    
    /* Bouton principal */
    div.stButton > button {
        background-color: #2563eb; color: white; border-radius: 8px; 
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1); padding: 10px 20px;
    }
    div.stButton > button:hover { background-color: #1e293b; color: white; }
    
    /* Am√©lioration de la lisibilit√© des conteneurs d'information */
    div[data-testid="stTextarea"] label,
    div[data-testid="stSelectbox"] label {
        font-weight: bold; /* Mettre en gras les √©tiquettes */
        color: #1e293b; /* Couleur du texte principal */
        font-size: 1.1rem;
    }

    /* Style pour la s√©paration des sections du rapport (HR line) */
    hr {
        border-top: 3px solid #e2e8f0; /* Ligne plus visible */
        margin: 20px 0;
    }

    /* Style pour les messages d'information (st.info) */
    div[data-testid="stAlert"] {
        border-left: 5px solid #2563eb; /* Bordure lat√©rale pour accentuer */
        background-color: #eef2ff; /* Fond l√©ger */
    }

    </style>
    """,
    unsafe_allow_html=True,
)


# --- üöÄ LOGIQUE PRINCIPALE DE L'INTERFACE ---

st.title("‚ú® FREY : Intelligence Artificielle Multifonction")
st.markdown("üëã *Professionnelle, bienveillante et inspirante, je suis pr√™te √† vous aider √† comprendre, analyser et cr√©er.*")

# Cr√©ation des trois onglets
tab1, tab2, tab3 = st.tabs(["üí¨ Chatbot Intelligent", "üìä Analyseur de Donn√©es", "‚úçÔ∏è G√©n√©rateur de Contenu"])

# --- 1. Onglet Chatbot (avec m√©moire) ---
with tab1:
    st.header("üí¨ Chatbot Intelligent (Conversationnel)")
    st.info("Posez-moi des questions en s√©quence. FREY se souvient du contexte de notre √©change.")
    
    # Bouton pour r√©initialiser la conversation
    st.button('üóëÔ∏è Commencer une nouvelle conversation', on_click=clear_chat_history)
    
    # 1. Affichage de l'historique des messages
    for message in st.session_state.chat_session.get_history():
        
        if message.role == "user":
            role_name = "Utilisateur"
            avatar_icon = "üë§"
        elif message.role == "model":
            role_name = "FREY"
            avatar_icon = "ü§ñ"
        else:
            # Ignorer le r√¥le 'system' qui contient le prompt
            continue

        # Affiche le message (avec le nouvel avatar)
        with st.chat_message(role_name, avatar=avatar_icon):
            st.markdown(message.parts[0].text)

    # 2. Zone de saisie utilisateur
    if chatbot_input := st.chat_input("Dites quelque chose √† FREY..."):
        
        # Afficher la requ√™te de l'utilisateur imm√©diatement
        with st.chat_message("Utilisateur", avatar="üë§"):
            st.markdown(chatbot_input)

        # Appel de la fonction Gemini avec la session de chat
        with st.spinner('FREY analyse et pr√©pare la r√©ponse...'):
            result = process_chatbot_query(
                chat_session=st.session_state.chat_session, # Passe la session stock√©e
                user_prompt=chatbot_input
            )
            
            # Afficher la r√©ponse de FREY
            if result["success"]:
                with st.chat_message("FREY", avatar="ü§ñ"):
                    st.markdown(result["reponse_complete"])
            else:
                 with st.chat_message("FREY", avatar="ü§ñ"):
                    st.error(result["reponse_complete"])

# --- 2. Onglet Analyseur de Donn√©es ---
with tab2:
    st.header("üìä Analyseur Automatique de Donn√©es")
    st.info("Collez ici des donn√©es tabulaires (CSV, tabul√©) ou t√©l√©chargez un fichier pour une analyse imm√©diate des tendances et des insights.")
    
    data_input = st.text_area("Coller vos donn√©es (CSV, tabul√©) :", height=150, key='data_input')
    uploaded_file = st.file_uploader("Ou t√©l√©verser un fichier de donn√©es (CSV, TXT)", type=["csv", "txt"])

    if st.button("Analyser les Donn√©es", key='btn_analyse'):
        if data_input or uploaded_file:
            with st.spinner('FREY analyse et r√©dige le rapport...'):
                
                source_data = uploaded_file if uploaded_file else data_input
                is_file = uploaded_file is not None

                # √âtape 1 : Analyse brute avec Pandas
                raw_analysis = analyze_data_pandas(source_data, is_file=is_file) 
                
                # V√©rification des erreurs de lecture de Pandas
                if raw_analysis.startswith("√âchec de la lecture des donn√©es") or raw_analysis.startswith("Le DataFrame est vide"):
                     st.error(raw_analysis)
                else:
                    # √âtape 2 : R√©daction et formatage par Gemini (style FREY)
                    formatted_report = format_analysis_with_gemini(
                        client=gemini_client,
                        raw_analysis=raw_analysis,
                        system_prompt=FREY_SYSTEM_PROMPT
                    )
                    
                    st.markdown("---")
                    st.markdown(formatted_report) # Affiche le rapport complet format√©

        else:
             st.error("Veuillez coller des donn√©es ou t√©l√©verser un fichier pour commencer l'analyse.")

# --- 3. Onglet G√©n√©rateur de Contenu ---
with tab3:
    st.header("‚úçÔ∏è G√©n√©rateur de Contenu Intelligent")
    st.info("R√©digez des textes professionnels, e-mails ou publications. Choisissez le ton souhait√© pour un r√©sultat parfait.")
    
    ton_select = st.selectbox(
        'Choisissez le Ton :',
        ('Professionnel', 'Amical', 'Dr√¥le', 'Inspirant')
    )
    
    sujet_input = st.text_area("Sujet et Instructions de R√©daction :", height=150, key='gen_input')
    
    if st.button("G√©n√©rer le Contenu", key='btn_gen'):
        if sujet_input:
            with st.spinner(f'FREY r√©dige votre contenu en utilisant le ton {ton_select}...'):
                
                # Appel de la fonction Gemini du module de g√©n√©ration
                generated_text = generate_content(
                    client=gemini_client,
                    subject=sujet_input, 
                    ton=ton_select, 
                    system_prompt=FREY_SYSTEM_PROMPT
                )
                
                st.markdown("---")
                st.markdown(f"### Contenu G√©n√©r√© (Ton : {ton_select}) :")
                st.markdown(generated_text)
                
            
        else:
            st.warning("Veuillez fournir un sujet et des instructions pour la r√©daction.")