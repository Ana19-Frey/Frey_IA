# modules/content.py (Correction de la fonction generate_content)

from google import genai
from google.genai import types # S'assurer que 'types' est import√© au d√©but du fichier

def generate_content(client: genai.Client, subject: str, ton: str, system_prompt: str) -> str:
    """
    ‚úÖ G√©n√®re du contenu textuel avec Gemini.
    """

    prompt = f"""
{system_prompt}

üéØ Objectif :
R√©dige un texte fluide, pertinent et de qualit√© professionnelle sur le sujet suivant,
en adoptant un ton **{ton}**.

üìù Sujet : "{subject}"
"""

    try:
        response = client.models.generate_content(
            model="gemini-2.5-flash", 
            contents=prompt,
            config=types.GenerateContentConfig(
                 temperature=0.7,
                 system_instruction=system_prompt # Le prompt syst√®me est appliqu√© directement ici
            )
        )

        # ‚ö†Ô∏è SOLUTION : V√âRIFICATION SIMPLE ET ROBUSTE
        if response.text:
            return response.text.strip()
        
        # Si la r√©ponse est vide (souvent √† cause d'un filtre de s√©curit√©)
        # On tente d'extraire le message du filtre pour le diagnostic
        try:
             # Ceci fonctionne avec la structure moderne de google-genai
             feedback = response.prompt_feedback.block_reason.name if response.prompt_feedback.block_reason else "Non sp√©cifi√©"
             return f"‚ö†Ô∏è La g√©n√©ration de contenu a √©chou√©. R√©ponse vide (Filtre de S√©curit√© ? Raison: {feedback})"
        except Exception:
             return "‚ö†Ô∏è La g√©n√©ration de contenu a √©chou√©. La r√©ponse de l'API √©tait vide."
        
    except Exception as e:
        return f"üö® ERREUR API GEMINI lors de la g√©n√©ration : {e}"