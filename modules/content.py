# modules/content_gen.py

from google import genai
from google.genai import types

def generate_content(client: genai.Client, subject: str, ton: str, system_prompt: str) -> str:
    """
    G√©n√®re du contenu en fonction du sujet et du ton demand√© par l'utilisateur via l'API Gemini.
    
    Args:
        client (genai.Client): Le client Gemini initialis√©.
        subject (str): Le sujet et les instructions de r√©daction.
        ton (str): Le ton souhait√© (Professionnel, Amical, Dr√¥le, Inspirant).
        system_prompt (str): Le prompt syst√®me de FREY.
        
    Returns:
        str: Le contenu g√©n√©r√© et format√©.
    """
    
    # Construction du prompt utilisateur int√©grant le ton sp√©cifique et l'identit√© FREY
    user_prompt = f"R√©digez un contenu sur le sujet suivant : '{subject}'. Le ton de la r√©daction doit √™tre strictement : {ton}. Respectez toutes les r√®gles FREY, y compris la structure et la synth√®se finale."
    
    config = types.GenerateContentConfig(
        system_instruction=system_prompt,
        temperature=0.7  # Un peu plus de cr√©ativit√© pour la g√©n√©ration de contenu
    )

    try:
        # Appel √† l'API Gemini
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=[user_prompt],
            config=config,
        )

        # Retourne la r√©ponse compl√®te format√©e par le mod√®le
        return response.text.strip()

    except Exception as e:
        return f"üö® ERREUR API GEMINI lors de la g√©n√©ration de contenu : {e}."